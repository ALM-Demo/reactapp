name: Azure Web App
on:
  repository_dispatch:
    types: create_strato_web_app
jobs:
  create-web-app:      
    runs-on: ubuntu-latest
    env:
      GITHUB_REPO_NAME: "${{ github.event.client_payload.repo }}"
      AZURE_SUBSCRIPTION: "${{ github.event.client_payload.subscription }}"
      AZURE_DEPLOY_ENVIRONMENT: "${{ github.event.client_payload.environment }}"
      AZURE_WEB_APP_TYPE: "${{ github.event.client_payload.app_type }}"
      AZURE_CLIENT_ID: "${{ github.event.client_payload.client_id }}"
      AZURE_CLIENT_SECRET: "${{ github.event.client_payload.client_secret }}"
      AZURE_TENANT_ID: "${{ github.event.client_payload.tenant_id }}"
      AZURE_WEB_APP_NAME_PREFIX: 'alm-app'
      AZURE_ACR_NAME_PREFIX: 'almacr'
      STRATOSPHERE_API_URL: https://api.live.external.byp.ai
      PROJECT_NAME: "${{ github.event.client_payload.project_name }}"
      GEOGRAPHY: "${{ github.event.client_payload.geography }}"
      OWNER_GROUP_NAME : "${{ github.event.client_payload.owner_groupname }}"
    steps:
    - name: Set env
      run: |
        echo "AZURE_WEB_APP_SVC_PLAN=${AZURE_WEB_APP_NAME_PREFIX}-${AZURE_WEB_APP_TYPE}-${AZURE_DEPLOY_ENVIRONMENT}" >> $GITHUB_ENV
        echo "AZURE_WEB_APP_NAME1=${AZURE_WEB_APP_NAME_PREFIX}-${AZURE_WEB_APP_TYPE}-${GITHUB_REPO_NAME}-${AZURE_DEPLOY_ENVIRONMENT}" >> $GITHUB_ENV
        echo "AZURE_WEB_APP_NAME=${GITHUB_REPO_NAME}-${AZURE_DEPLOY_ENVIRONMENT}" >> $GITHUB_ENV
        echo "AZURE_ACR_NAME=${AZURE_ACR_NAME_PREFIX}${AZURE_DEPLOY_ENVIRONMENT}" >> $GITHUB_ENV
        echo "AZURE_WEB_APP_IMAGE_NAME=${GITHUB_REPO_NAME}-${AZURE_DEPLOY_ENVIRONMENT}" >> $GITHUB_ENV
    
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Azure
      run: |
        az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
        
    - name: Create Azure Container Registry
      run: |
        curl -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.ST_TOKEN }}" \
          --request PUT \
          --data '{"spec": {"container_registry": {"access_policies": [{"name": "spn-alm", "type": "resource"},{"name": "grp-sec-saas-sub-lplat-test-reader", "type": "group"}]}}}' \
          ${{ env.STRATOSPHERE_API_URL }}/geographies/${{ env.GEOGRAPHY }}/projects/${{ env.PROJECT_NAME }}/resources/azure-container-registry/${{ env.AZURE_ACR_NAME }}

        curl -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.ST_TOKEN }}" \
          --request GET \
          ${{ env.STRATOSPHERE_API_URL }}/geographies/${{ env.GEOGRAPHY }}/projects/${{ env.PROJECT_NAME }}/resources/azure-container-registry/${{ env.AZURE_ACR_NAME }} > temp.json
        echo "AZURE_ACR_REPO_NAME=$(jq -r '.status.azure.resource_name' temp.json)" >> $GITHUB_ENV
        echo "AZURE_ACR_STATUS=$(jq -r '.status.state' temp.json)" >> $GITHUB_ENV  
        for ((i = 0; i < 12; i++))
        do
          if [ ${{ env.AZURE_ACR_STATUS }} != "deployed" ];then
            sleep 5
            if [ $i == 11 ];then
              exit 1
            fi
         fi
        done   
   
    - name: Get Timestamp
      id: time
      run: |
        echo "AZURE_WEB_APP_IMAGE_TAG=$(date '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV
            
    - name: Build Docker Image
      run: |
        sudo docker build . --file ".github/docker/Dockerfile_$AZURE_WEB_APP_TYPE" --tag "$AZURE_ACR_REPO_NAME.azurecr.io/$AZURE_WEB_APP_IMAGE_NAME:$AZURE_WEB_APP_IMAGE_TAG"
        
    - name: Tag Docker Image
      run: |
        sudo docker tag $AZURE_ACR_REPO_NAME.azurecr.io/$AZURE_WEB_APP_IMAGE_NAME:$AZURE_WEB_APP_IMAGE_TAG $AZURE_ACR_REPO_NAME.azurecr.io/$AZURE_WEB_APP_IMAGE_NAME:latest
        
    - name: Login to ACR
      run: |
        az acr login --name $AZURE_ACR_REPO_NAME
    - name: Push Docker Images
      run: |
        docker push "$AZURE_ACR_REPO_NAME.azurecr.io/$AZURE_WEB_APP_IMAGE_NAME:$AZURE_WEB_APP_IMAGE_TAG"
        docker push "$AZURE_ACR_REPO_NAME.azurecr.io/$AZURE_WEB_APP_IMAGE_NAME:latest"
    - name: Create Azure Web App
      run: |
        curl -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.ST_TOKEN }}" \
          --request PUT \
          --data '{"spec": {"liveness_probe": {"initial_delay_seconds": 120},"enabled": true,"image": '\"${{ env.AZURE_ACR_REPO_NAME }}.azurecr.io/${{ env.AZURE_WEB_APP_IMAGE_NAME }}:${{ env.AZURE_WEB_APP_IMAGE_TAG }}\"',"network": {"access": "external"},"authentication": {"enabled": true}}}' \
          ${{ env.STRATOSPHERE_API_URL }}/geographies/${{ env.GEOGRAPHY }}/projects/${{ env.PROJECT_NAME }}/resources/container-web/${{ env.AZURE_WEB_APP_NAME }}

        curl -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.ST_TOKEN }}" \
          --request GET \
          ${{ env.STRATOSPHERE_API_URL }}/geographies/${{ env.GEOGRAPHY }}/projects/${{ env.PROJECT_NAME }}/resources/container-web/${{ env.AZURE_WEB_APP_NAME }} > temp.json
        echo "AZURE_WEBAPP_STATUS=$(jq -r '.status.state' temp.json)" >> $GITHUB_ENV  
        for ((i = 0; i < 60; i++))
        do
          if [ ${{ env.AZURE_WEBAPP_STATUS }} != "deployed" ];then
            sleep 5
            if [ $i == 59 ];then
              exit 1
            fi
         fi
        done
        
